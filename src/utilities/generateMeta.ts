import type { Metadata } from 'next'

import type { Media, Page, Post, Config } from '../payload-types'

import { mergeOpenGraph } from './mergeOpenGraph'
import { getServerSideURL } from './getURL'
import { getPayload } from 'payload'
import configPromise from '@payload-config'

// Type for site settings
interface SiteSettings {
  siteName?: string
  siteTagline?: string
  siteDescription?: string
  siteKeywords?: string
  ogImage?: Media | string
  companyName?: string
  address?: string
  phone?: string
  email?: string
  businessHours?: string
  line?: string
  facebook?: string
}

// Extended Media type with sizes
interface MediaWithSizes extends Media {
  sizes?: {
    feature?: {
      url: string
      width?: number
      height?: number
    }
    card?: {
      url: string
      width?: number
      height?: number
    }
    thumbnail?: {
      url: string
      width?: number
      height?: number
    }
  }
}

// Helper function to get image URL from media object
const getImageURL = (
  image?: Media | Config['db']['defaultIDType'] | null,
  fallbackUrl?: string,
) => {
  const serverUrl = getServerSideURL()

  let url = fallbackUrl || serverUrl + '/jmc-og-image.svg'

  if (image && typeof image === 'object' && 'url' in image) {
    // р╣Гр╕Кр╣Й feature size р╕Цр╣Йр╕▓р╕бр╕╡ (1024x768) р╕лр╕гр╕╖р╕н card size (768x576) р╕кр╕│р╕лр╕гр╕▒р╕Ъ OG
    const mediaWithSizes = image as MediaWithSizes
    const featureUrl = mediaWithSizes.sizes?.feature?.url
    const cardUrl = mediaWithSizes.sizes?.card?.url
    const originalUrl = image.url

    let finalUrl = null

    if (featureUrl) {
      finalUrl = featureUrl
    } else if (cardUrl) {
      finalUrl = cardUrl
    } else if (originalUrl) {
      finalUrl = originalUrl
    }

    if (finalUrl) {
      // р╕Цр╣Йр╕▓ URL р╣Ар╕Ыр╣Зр╕Щ absolute URL р╣Бр╕ер╣Йр╕з р╣Гр╕Кр╣Йр╣Ар╕ер╕в
      if (finalUrl.startsWith('http')) {
        url = finalUrl
      } else {
        // р╕Цр╣Йр╕▓р╣Ар╕Ыр╣Зр╕Щ relative URL р╣Гр╕лр╣Йр╣Ар╕Юр╕┤р╣Ир╕б server URL (р╕нр╕вр╣Ир╕▓р╕ер╕╖р╕бр╕ер╕Ъ slash р╕Лр╣Йр╕│)
        const cleanUrl = finalUrl.startsWith('/') ? finalUrl : `/${finalUrl}`
        url = `${serverUrl}${cleanUrl}`
      }
    }

    console.log('ЁЯЦ╝я╕П Image URL processed:', {
      hasFeature: !!featureUrl,
      hasCard: !!cardUrl,
      hasOriginal: !!originalUrl,
      finalUrl: url,
    })
  }

  return url
}

// Google Algorithm 2025 - Enhanced title generation with local keywords
const generateOptimizedTitle = (
  pageTitle?: string,
  _siteName?: string,
  pageType?: 'home' | 'page' | 'product' | 'category' | 'post',
  pageSlug?: string,
): string => {
  const businessName = 'р╕Ир╕Зр╕бр╕╡р╕Кр╕▒р╕вр╕Др╣Йр╕▓р╕зр╕▒р╕кр╕Фр╕╕'
  const localKeywords = 'р╕Хр╕ер╕┤р╣Ир╕Зр╕Кр╕▒р╕Щ р╕Ыр╕▓р╕Бр╕Лр╕нр╕вр╕Кр╕▒р╕Бр╕Юр╕гр╕░6'
  const primaryKeywords = 'р╕зр╕▒р╕кр╕Фр╕╕р╕Бр╣Ир╕нр╕кр╕гр╣Йр╕▓р╕З р╣Гр╕Бр╕ер╣Йр╕Йр╕▒р╕Щ'

  // Special handling for contact page
  if (pageSlug === 'contactus-' || pageSlug === 'contact') {
    return pageTitle
      ? `${pageTitle} - р╕гр╣Йр╕▓р╕Щр╕зр╕▒р╕кр╕Фр╕╕р╕Бр╣Ир╕нр╕кр╕гр╣Йр╕▓р╕З р╕Хр╕ер╕┤р╣Ир╕Зр╕Кр╕▒р╕Щ р╕Ыр╕▓р╕Бр╕Лр╕нр╕вр╕Кр╕▒р╕Бр╕Юр╕гр╕░6 р╣Гр╕Бр╕ер╣Йр╕Йр╕▒р╕Щ | JMC`
      : 'р╕Хр╕┤р╕Фр╕Хр╣Ир╕нр╣Ар╕гр╕▓ - р╕гр╣Йр╕▓р╕Щр╕зр╕▒р╕кр╕Фр╕╕р╕Бр╣Ир╕нр╕кр╕гр╣Йр╕▓р╕З р╕Хр╕ер╕┤р╣Ир╕Зр╕Кр╕▒р╕Щ р╕Ыр╕▓р╕Бр╕Лр╕нр╕вр╕Кр╕▒р╕Бр╕Юр╕гр╕░6 р╣Гр╕Бр╕ер╣Йр╕Йр╕▒р╕Щ | р╕Ир╕Зр╕бр╕╡р╕Кр╕▒р╕вр╕Др╣Йр╕▓р╕зр╕▒р╕кр╕Фр╕╕'
  }

  // Special handling for about page
  if (pageSlug === 'aboutus' || pageSlug === 'about') {
    return pageTitle
      ? `${pageTitle} - р╕гр╣Йр╕▓р╕Щр╕зр╕▒р╕кр╕Фр╕╕р╕Бр╣Ир╕нр╕кр╕гр╣Йр╕▓р╕З р╕Хр╕ер╕┤р╣Ир╕Зр╕Кр╕▒р╕Щ р╕Ыр╕▓р╕Бр╕Лр╕нр╕вр╕Кр╕▒р╕Бр╕Юр╕гр╕░6 р╣Гр╕Бр╕ер╣Йр╕Йр╕▒р╕Щ | JMC`
      : 'р╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Бр╕▒р╕Ър╣Ар╕гр╕▓ - р╕гр╣Йр╕▓р╕Щр╕зр╕▒р╕кр╕Фр╕╕р╕Бр╣Ир╕нр╕кр╕гр╣Йр╕▓р╕З р╕Хр╕ер╕┤р╣Ир╕Зр╕Кр╕▒р╕Щ р╕Ыр╕▓р╕Бр╕Лр╕нр╕вр╕Кр╕▒р╕Бр╕Юр╕гр╕░6 р╣Гр╕Бр╕ер╣Йр╕Йр╕▒р╕Щ | р╕Ир╕Зр╕бр╕╡р╕Кр╕▒р╕вр╕Др╣Йр╕▓р╕зр╕▒р╕кр╕Фр╕╕'
  }

  // Default titles optimized for Google 2025 - Multi-area targeting
  const defaultTitles = {
    home: `${businessName} ${localKeywords} р╕нр╕▒р╕Щр╕Фр╕▒р╕Ъ1 | ${primaryKeywords} р╕гр╕▓р╕Др╕▓р╕Цр╕╣р╕Бр╕Чр╕╡р╣Ир╕кр╕╕р╕Ф р╕кр╣Ир╕Зр╕Яр╕гр╕╡ р╕Ыр╕┤р╣Ир╕Щр╣Ар╕Бр╕ер╣Йр╕▓ р╕Ир╕гр╕▒р╕Н р╕Ър╕▓р╕Зр╕Вр╕╕р╕Щр╕Щр╕Щр╕Чр╣М р╕Ър╕гр╕б р╕кр╕зр╕Щр╕Ьр╕▒р╕Б р╕Юр╕гр╕░р╕гр╕▓р╕б5 р╕Ър╕▓р╕Зр╕Бр╕гр╕зр╕в`,
    page: pageTitle
      ? `${pageTitle} | ${businessName} ${localKeywords}`
      : `${businessName} ${localKeywords}`,
    product: pageTitle
      ? `${pageTitle} | ${businessName} ${localKeywords} р╕гр╕▓р╕Др╕▓р╕Фр╕╡`
      : `р╕кр╕┤р╕Щр╕Др╣Йр╕▓ ${businessName}`,
    category: pageTitle
      ? `р╕лр╕бр╕зр╕Ф${pageTitle} | ${businessName} ${localKeywords}`
      : `р╕лр╕бр╕зр╕Фр╕кр╕┤р╕Щр╕Др╣Йр╕▓ ${businessName}`,
    post: pageTitle ? `${pageTitle} | р╕Ър╕Чр╕Др╕зр╕▓р╕б ${businessName}` : `р╕Ър╕Чр╕Др╕зр╕▓р╕б ${businessName}`,
  }

  if (pageTitle) {
    return defaultTitles[pageType || 'page']
  }

  return defaultTitles[pageType || 'home']
}

// Google Algorithm 2025 - Enhanced description with semantic keywords
const generateOptimizedDescription = (
  pageDescription?: string,
  pageType?: 'home' | 'page' | 'product' | 'category' | 'post',
  pageTitle?: string,
  pageSlug?: string,
): string => {
  const baseDescription =
    'р╕Ир╕Зр╕бр╕╡р╕Кр╕▒р╕вр╕Др╣Йр╕▓р╕зр╕▒р╕кр╕Фр╕╕ р╕Хр╕ер╕┤р╣Ир╕Зр╕Кр╕▒р╕Щ р╕Ыр╕▓р╕Бр╕Лр╕нр╕вр╕Кр╕▒р╕Бр╕Юр╕гр╕░6 р╕гр╣Йр╕▓р╕Щр╕зр╕▒р╕кр╕Фр╕╕р╕Бр╣Ир╕нр╕кр╕гр╣Йр╕▓р╕Зр╕Др╕гр╕Ър╕зр╕Зр╕Ир╕г р╕гр╕▓р╕Др╕▓р╕Цр╕╣р╕Б р╕кр╣Ир╕Зр╕Фр╣Ир╕зр╕Щр╕Цр╕╢р╕Зр╣Др╕Лр╕Хр╣Мр╕Зр╕▓р╕Щ'
  const semanticKeywords = 'р╕нр╕┤р╕Р р╕лр╕┤р╕Щ р╕Ыр╕╣р╕Щ р╕Чр╕гр╕▓р╕в р╣Ар╕лр╕ер╣Зр╕Б р╕Ыр╕гр╕░р╕Ыр╕▓ р╣Др╕Яр╕Яр╣Йр╕▓ р╕Кр╣Ир╕▓р╕З р╕Др╕гр╕Ър╕Ир╕Ър╕Чр╕╡р╣Ир╣Ар╕Фр╕╡р╕вр╕з'
  const trustSignals = 'р╕Ър╕гр╕┤р╕Бр╕▓р╕гр╕бр╕╖р╕нр╕нр╕▓р╕Кр╕╡р╕Ю р╕гр╕▒р╕Ър╕Ыр╕гр╕░р╕Бр╕▒р╕Щр╕Др╕╕р╕Ур╕ар╕▓р╕Ю'

  // Special handling for contact page
  if (pageSlug === 'contactus-' || pageSlug === 'contact') {
    return (
      pageDescription ||
      'р╕Хр╕┤р╕Фр╕Хр╣Ир╕нр╕гр╣Йр╕▓р╕Щр╕зр╕▒р╕кр╕Фр╕╕р╕Бр╣Ир╕нр╕кр╕гр╣Йр╕▓р╕З р╕Ир╕Зр╕бр╕╡р╕Кр╕▒р╕вр╕Др╣Йр╕▓р╕зр╕▒р╕кр╕Фр╕╕ р╕Хр╕ер╕┤р╣Ир╕Зр╕Кр╕▒р╕Щ р╕Ыр╕▓р╕Бр╕Лр╕нр╕вр╕Кр╕▒р╕Бр╕Юр╕гр╕░6 р╣Вр╕Чр╕г 02-434-8319 р╣Ар╕Ыр╕┤р╕Ф р╕И-р╕к 07:00-17:00 р╕Щ. р╕Фр╕╣р╣Бр╕Ьр╕Щр╕Чр╕╡р╣Ир╕гр╣Йр╕▓р╕Щ р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Хр╕┤р╕Фр╕Хр╣Ир╕нр╕Др╕гр╕Ър╕Цр╣Йр╕зр╕Щ'
    )
  }

  // Special handling for about page
  if (pageSlug === 'aboutus' || pageSlug === 'about') {
    return (
      pageDescription ||
      'р╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Бр╕▒р╕Ър╕Ир╕Зр╕бр╕╡р╕Кр╕▒р╕вр╕Др╣Йр╕▓р╕зр╕▒р╕кр╕Фр╕╕ р╕Бр╣Ир╕нр╕Хр╕▒р╣Йр╕Зр╕Ыр╕╡ 2020 р╕гр╣Йр╕▓р╕Щр╕зр╕▒р╕кр╕Фр╕╕р╕Бр╣Ир╕нр╕кр╕гр╣Йр╕▓р╕Зр╕Др╕гр╕Ър╕зр╕Зр╕Ир╕г р╕Хр╕ер╕┤р╣Ир╕Зр╕Кр╕▒р╕Щ р╕Ыр╕▓р╕Бр╕Лр╕нр╕вр╕Кр╕▒р╕Бр╕Юр╕гр╕░6 р╣Гр╕лр╣Йр╕Ър╕гр╕┤р╕Бр╕▓р╕гр╕Кр╕╕р╕бр╕Кр╕Щ р╕бр╕╡р╕Ыр╕гр╕░р╕кр╕Ър╕Бр╕▓р╕гр╕Ур╣Мр╕Бр╕зр╣Ир╕▓ 35 р╕Ыр╕╡ р╕гр╕▓р╕Др╕▓р╕Цр╕╣р╕Б р╕Др╕╕р╕Ур╕ар╕▓р╕Юр╣Ар╕вр╕╡р╣Ир╕вр╕б'
    )
  }

  if (pageDescription) {
    // р╣Ар╕Юр╕┤р╣Ир╕б local keywords р╣Бр╕ер╕░ trust signals
    return `${pageDescription} ${baseDescription} ${trustSignals}`
  }

  const defaultDescriptions = {
    home: `ЁЯПЖ р╕гр╣Йр╕▓р╕Щр╕зр╕▒р╕кр╕Фр╕╕р╕Бр╣Ир╕нр╕кр╕гр╣Йр╕▓р╕З р╕нр╕▒р╕Щр╕Фр╕▒р╕Ъ1 ${baseDescription} р╕кр╣Ир╕Зр╕Яр╕гр╕╡ р╕Ыр╕┤р╣Ир╕Щр╣Ар╕Бр╕ер╣Йр╕▓ р╕Ир╕гр╕▒р╕Н р╕Ър╕▓р╕Зр╕Вр╕╕р╕Щр╕Щр╕Щр╕Чр╣М р╕Ър╕гр╕б р╕кр╕зр╕Щр╕Ьр╕▒р╕Б р╕Юр╕гр╕░р╕гр╕▓р╕б5 р╕Ър╕▓р╕Зр╕Бр╕гр╕зр╕в ${semanticKeywords} ${trustSignals} р╣Вр╕Чр╕г 02-434-8319`,
    page: `${pageTitle ? pageTitle + ' - ' : ''}${baseDescription} ${trustSignals}`,
    product: `${pageTitle ? pageTitle + ' р╕Др╕╕р╕Ур╕ар╕▓р╕Юр╕кр╕╣р╕З - ' : ''}${baseDescription} ${trustSignals}`,
    category: `${pageTitle ? 'р╕кр╕┤р╕Щр╕Др╣Йр╕▓' + pageTitle + ' - ' : ''}${baseDescription} ${semanticKeywords}`,
    post: `${pageTitle ? pageTitle + ' - ' : ''}р╣Ар╕Чр╕Др╕Щр╕┤р╕Др╣Бр╕ер╕░р╕Др╕зр╕▓р╕бр╕гр╕╣р╣Й ${baseDescription}`,
  }

  return defaultDescriptions[pageType || 'home']
}

// Google Algorithm 2025 - Generate keywords with semantic search support
const generateKeywords = (
  siteKeywords?: string,
  pageType?: 'home' | 'page' | 'product' | 'category' | 'post',
  pageTitle?: string,
): string => {
  const coreKeywords = ['р╕зр╕▒р╕кр╕Фр╕╕р╕Бр╣Ир╕нр╕кр╕гр╣Йр╕▓р╕З', 'р╕Хр╕ер╕┤р╣Ир╕Зр╕Кр╕▒р╕Щ', 'р╣Гр╕Бр╕ер╣Йр╕Йр╕▒р╕Щ', 'р╕Ыр╕▓р╕Бр╕Лр╕нр╕вр╕Кр╕▒р╕Бр╕Юр╕гр╕░6', 'р╕Ир╕Зр╕бр╕╡р╕Кр╕▒р╕вр╕Др╣Йр╕▓р╕зр╕▒р╕кр╕Фр╕╕']

  const semanticKeywords = [
    'р╕нр╕┤р╕Р р╕лр╕┤р╕Щ р╕Ыр╕╣р╕Щ р╕Чр╕гр╕▓р╕в',
    'р╣Ар╕лр╕ер╣Зр╕Б р╕Ыр╕гр╕░р╕Ыр╕▓ р╣Др╕Яр╕Яр╣Йр╕▓',
    'р╕гр╣Йр╕▓р╕Щр╕зр╕▒р╕кр╕Фр╕╕р╕Бр╣Ир╕нр╕кр╕гр╣Йр╕▓р╕З',
    'р╕гр╕▓р╕Др╕▓р╕Цр╕╣р╕Б р╕кр╣Ир╕Зр╕Фр╣Ир╕зр╕Щ',
    'р╕Др╕гр╕Ър╕зр╕Зр╕Ир╕г',
  ]

  const localKeywords = [
    'р╕Хр╕ер╕┤р╣Ир╕Зр╕Кр╕▒р╕Щ р╕Бр╕гр╕╕р╕Зр╣Ар╕Чр╕Ю',
    'р╕Кр╕▒р╕Бр╕Юр╕гр╕░ р╕Хр╕ер╕┤р╣Ир╕Зр╕Кр╕▒р╕Щ',
    'р╕зр╕▒р╕кр╕Фр╕╕р╕Бр╣Ир╕нр╕кр╕гр╣Йр╕▓р╕З р╣Гр╕Бр╕ер╣Йр╕Йр╕▒р╕Щ',
    'р╕кр╣Ир╕Зр╕зр╕▒р╕кр╕Фр╕╕ р╕Хр╕ер╕┤р╣Ир╕Зр╕Кр╕▒р╕Щ',
    'р╕зр╕▒р╕кр╕Фр╕╕р╕Бр╣Ир╕нр╕кр╕гр╣Йр╕▓р╕Зр╣Гр╕Бр╕ер╣Йр╕Йр╕▒р╕Щ р╕Хр╕ер╕┤р╣Ир╕Зр╕Кр╕▒р╕Щ',
    'р╕зр╕▒р╕кр╕Фр╕╕р╕Бр╣Ир╕нр╕кр╕гр╣Йр╕▓р╕Зр╣Гр╕Бр╕ер╣Йр╕Йр╕▒р╕Щ р╕Кр╕▒р╕Бр╕Юр╕гр╕░',
    'р╕зр╕▒р╕кр╕Фр╕╕р╕Бр╣Ир╕нр╕кр╕гр╣Йр╕▓р╕Зр╣Гр╕Бр╕ер╣Йр╕Йр╕▒р╕Щ р╕Ър╕▓р╕Зр╕Вр╕╕р╕Щр╕Щр╕Щр╕Чр╣М',
    'р╕зр╕▒р╕кр╕Фр╕╕р╕Бр╣Ир╕нр╕кр╕гр╣Йр╕▓р╕Зр╣Гр╕Бр╕ер╣Йр╕Йр╕▒р╕Щ р╕Ир╕гр╕▒р╕Нр╕кр╕Щр╕┤р╕Чр╕зр╕Зр╕ир╣М',
    'р╕зр╕▒р╕кр╕Фр╕╕р╕Бр╣Ир╕нр╕кр╕гр╣Йр╕▓р╕Зр╣Гр╕Бр╕ер╣Йр╕Йр╕▒р╕Щ р╕Ыр╕┤р╣Ир╕Щр╣Ар╕Бр╕ер╣Йр╕▓',
    'р╕зр╕▒р╕кр╕Фр╕╕р╕Бр╣Ир╕нр╕кр╕гр╣Йр╕▓р╕Зр╣Гр╕Бр╕ер╣Йр╕Йр╕▒р╕Щ р╕Юр╕гр╕░р╕гр╕▓р╕б5',
    'р╕зр╕▒р╕кр╕Фр╕╕р╕Бр╣Ир╕нр╕кр╕гр╣Йр╕▓р╕Зр╣Гр╕Бр╕ер╣Йр╕Йр╕▒р╕Щ р╕Ър╕▓р╕Зр╕Бр╕гр╕зр╕в',
    'р╕зр╕▒р╕кр╕Фр╕╕р╕Бр╣Ир╕нр╕кр╕гр╣Йр╕▓р╕Зр╣Гр╕Бр╕ер╣Йр╕Йр╕▒р╕Щ р╕кр╕зр╕Щр╕Ьр╕▒р╕Б',
    'р╕зр╕▒р╕кр╕Фр╕╕р╕Бр╣Ир╕нр╕кр╕гр╣Йр╕▓р╕Зр╕Ыр╕┤р╣Ир╕Щр╣Ар╕Бр╕ер╣Йр╕▓',
    'р╕зр╕▒р╕кр╕Фр╕╕р╕Бр╣Ир╕нр╕кр╕гр╣Йр╕▓р╕З р╕Ыр╕┤р╣Ир╕Щр╣Ар╕Бр╕ер╣Йр╕▓',
    'р╕зр╕▒р╕кр╕Фр╕╕р╕Бр╣Ир╕нр╕кр╕гр╣Йр╕▓р╕Зр╕Ир╕гр╕▒р╕Н',
    'р╕зр╕▒р╕кр╕Фр╕╕р╕Бр╣Ир╕нр╕кр╕гр╣Йр╕▓р╕З р╕Ир╕гр╕▒р╕Н',
    'р╕зр╕▒р╕кр╕Фр╕╕р╕Бр╣Ир╕нр╕кр╕гр╣Йр╕▓р╕Зр╕Ър╕▓р╕Зр╕Вр╕╕р╕Щр╕Щр╕Щр╕Чр╣М',
    'р╕зр╕▒р╕кр╕Фр╕╕р╕Бр╣Ир╕нр╕кр╕гр╣Йр╕▓р╕З р╕Ър╕▓р╕Зр╕Вр╕╕р╕Щр╕Щр╕Щр╕Чр╣М',
    'р╕зр╕▒р╕кр╕Фр╕╕р╕Бр╣Ир╕нр╕кр╕гр╣Йр╕▓р╕Зр╕кр╕зр╕Щр╕Ьр╕▒р╕Б',
    'р╕зр╕▒р╕кр╕Фр╕╕р╕Бр╣Ир╕нр╕кр╕гр╣Йр╕▓р╕З р╕кр╕зр╕Щр╕Ьр╕▒р╕Б',
    'р╕зр╕▒р╕кр╕Фр╕╕р╕Бр╣Ир╕нр╕кр╕гр╣Йр╕▓р╕Зр╕Юр╕гр╕░р╕гр╕▓р╕б5',
    'р╕зр╕▒р╕кр╕Фр╕╕р╕Бр╣Ир╕нр╕кр╕гр╣Йр╕▓р╕З р╕Юр╕гр╕░р╕гр╕▓р╕б5',
    'р╕зр╕▒р╕кр╕Фр╕╕р╕Бр╣Ир╕нр╕кр╕гр╣Йр╕▓р╕Зр╕Ър╕▓р╕Зр╕Бр╕гр╕зр╕в',
    'р╕зр╕▒р╕кр╕Фр╕╕р╕Бр╣Ир╕нр╕кр╕гр╣Йр╕▓р╕З р╕Ър╕▓р╕Зр╕Бр╕гр╕зр╕в',
    'р╕гр╣Йр╕▓р╕Щр╕зр╕▒р╕кр╕Фр╕╕р╕Бр╣Ир╕нр╕кр╕гр╣Йр╕▓р╕Зр╕Ыр╕┤р╣Ир╕Щр╣Ар╕Бр╕ер╣Йр╕▓',
    'р╕гр╣Йр╕▓р╕Щр╕зр╕▒р╕кр╕Фр╕╕р╕Бр╣Ир╕нр╕кр╕гр╣Йр╕▓р╕Зр╕Ир╕гр╕▒р╕Н',
    'р╕гр╣Йр╕▓р╕Щр╕зр╕▒р╕кр╕Фр╕╕р╕Бр╣Ир╕нр╕кр╕гр╣Йр╕▓р╕Зр╕Ър╕▓р╕Зр╕Вр╕╕р╕Щр╕Щр╕Щр╕Чр╣М',
    'р╕гр╣Йр╕▓р╕Щр╕зр╕▒р╕кр╕Фр╕╕р╕Бр╣Ир╕нр╕кр╕гр╣Йр╕▓р╕Зр╕Ър╕гр╕б',
    'р╕гр╣Йр╕▓р╕Щр╕зр╕▒р╕кр╕Фр╕╕р╕Бр╣Ир╕нр╕кр╕гр╣Йр╕▓р╕Зр╕кр╕зр╕Щр╕Ьр╕▒р╕Б',
    'р╕гр╣Йр╕▓р╕Щр╕зр╕▒р╕кр╕Фр╕╕р╕Бр╣Ир╕нр╕кр╕гр╣Йр╕▓р╕Зр╕Юр╕гр╕░р╕гр╕▓р╕б5',
    'р╕гр╣Йр╕▓р╕Щр╕зр╕▒р╕кр╕Фр╕╕р╕Бр╣Ир╕нр╕кр╕гр╣Йр╕▓р╕Зр╕Ър╕▓р╕Зр╕Бр╕гр╕зр╕в',
    'р╕зр╕▒р╕кр╕Фр╕╕р╕Бр╣Ир╕нр╕кр╕гр╣Йр╕▓р╕З р╣Ар╕Вр╕Хр╕Хр╕ер╕┤р╣Ир╕Зр╕Кр╕▒р╕Щ',
    'р╕зр╕▒р╕кр╕Фр╕╕р╕Бр╣Ир╕нр╕кр╕гр╣Йр╕▓р╕З р╣Ар╕Вр╕Хр╕Ыр╕┤р╣Ир╕Щр╣Ар╕Бр╕ер╣Йр╕▓',
    'р╕зр╕▒р╕кр╕Фр╕╕р╕Бр╣Ир╕нр╕кр╕гр╣Йр╕▓р╕З р╣Ар╕Вр╕Хр╕Ър╕▓р╕Зр╕Вр╕╕р╕Щр╕Щр╕Щр╕Чр╣М',
  ]

  const keywords = [...coreKeywords, ...semanticKeywords, ...localKeywords]

  if (siteKeywords) {
    keywords.unshift(...siteKeywords.split(',').map((k) => k.trim()))
  }

  if (pageTitle && pageType !== 'home') {
    keywords.unshift(pageTitle)
  }

  return keywords.join(', ')
}

export const generateMeta = async (args: {
  doc: Partial<Page> | Partial<Post> | null
  pageType?: 'home' | 'page' | 'product' | 'category' | 'post'
}): Promise<Metadata> => {
  const { doc, pageType = 'page' } = args

  // Default fallback values optimized for Google Algorithm 2025 - Multi-area targeting
  let defaultSiteName = 'р╕Ир╕Зр╕бр╕╡р╕Кр╕▒р╕вр╕Др╣Йр╕▓р╕зр╕▒р╕кр╕Фр╕╕'
  let defaultKeywords =
    'р╕зр╕▒р╕кр╕Фр╕╕р╕Бр╣Ир╕нр╕кр╕гр╣Йр╕▓р╕З, р╕Хр╕ер╕┤р╣Ир╕Зр╕Кр╕▒р╕Щ, р╣Гр╕Бр╕ер╣Йр╕Йр╕▒р╕Щ, р╕Ыр╕▓р╕Бр╕Лр╕нр╕вр╕Кр╕▒р╕Бр╕Юр╕гр╕░6, р╕Ир╕Зр╕бр╕╡р╕Кр╕▒р╕вр╕Др╣Йр╕▓р╕зр╕▒р╕кр╕Фр╕╕, р╕Ыр╕┤р╣Ир╕Щр╣Ар╕Бр╕ер╣Йр╕▓, р╕Ир╕гр╕▒р╕Н, р╕Ър╕▓р╕Зр╕Вр╕╕р╕Щр╕Щр╕Щр╕Чр╣М, р╕Ър╕гр╕б, р╕кр╕зр╕Щр╕Ьр╕▒р╕Б, р╕Юр╕гр╕░р╕гр╕▓р╕б5, р╕Ър╕▓р╕Зр╕Бр╕гр╕зр╕в'
  let defaultOgImageUrl = getServerSideURL() + '/jmc-og-image.svg'
  let siteSettings: SiteSettings | null = null

  try {
    // Try to get site settings from database
    const payload = await getPayload({ config: configPromise })
    // Get site-settings global - suppress type warning
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const result = await (payload as any).findGlobal({
      slug: 'site-settings',
      depth: 1,
    })

    siteSettings = result as SiteSettings

    if (process.env.NODE_ENV === 'development') {
      console.log('ЁЯУЛ Generate Meta - Site Settings:', {
        exists: !!siteSettings,
        siteName: siteSettings?.siteName,
        hasOgImage: !!siteSettings?.ogImage,
      })
    }

    if (siteSettings) {
      defaultSiteName = siteSettings.siteName || defaultSiteName
      defaultKeywords = siteSettings.siteKeywords || defaultKeywords

      // Get OG image from site settings
      if (siteSettings.ogImage) {
        defaultOgImageUrl = getImageURL(siteSettings.ogImage, defaultOgImageUrl)
        if (process.env.NODE_ENV === 'development') {
          console.log('ЁЯОп Using OG image from settings:', defaultOgImageUrl)
        }
      }
    }
  } catch (error) {
    if (process.env.NODE_ENV === 'development') {
      console.error('тЭМ Failed to load site settings for meta generation:', error)
    }
  }

  // Extract page slug for specific page handling
  const pageSlug = Array.isArray(doc?.slug) ? doc.slug.join('/') : doc?.slug

  // Google Algorithm 2025 optimized meta generation with local SEO
  const optimizedTitle = generateOptimizedTitle(
    doc?.meta?.title || undefined,
    defaultSiteName,
    pageType,
    pageSlug || undefined,
  )

  const optimizedDescription = generateOptimizedDescription(
    doc?.meta?.description || undefined,
    pageType,
    doc?.meta?.title || (typeof doc?.title === 'string' ? doc.title : undefined),
    pageSlug || undefined,
  )

  const optimizedKeywords = generateKeywords(
    defaultKeywords,
    pageType,
    doc?.meta?.title || (typeof doc?.title === 'string' ? doc.title : undefined),
  )

  const ogImage = getImageURL(doc?.meta?.image, defaultOgImageUrl)

  if (process.env.NODE_ENV === 'development') {
    console.log('ЁЯОп Google Algorithm 2025 Optimized Meta:', {
      title: optimizedTitle,
      description: optimizedDescription,
      keywords: optimizedKeywords,
      pageType,
      ogImage,
    })
  }

  // Generate canonical URL
  const canonicalUrl = Array.isArray(doc?.slug)
    ? `${getServerSideURL()}/${doc?.slug.join('/')}`
    : doc?.slug
      ? `${getServerSideURL()}/${doc.slug}`
      : getServerSideURL()

  return {
    title: optimizedTitle,
    description: optimizedDescription,
    keywords: optimizedKeywords,
    authors: [{ name: defaultSiteName }],
    creator: defaultSiteName,
    publisher: defaultSiteName,
    formatDetection: {
      telephone: true,
      address: true,
      email: true,
    },
    alternates: {
      canonical: canonicalUrl,
    },
    robots: {
      index: true,
      follow: true,
      googleBot: {
        index: true,
        follow: true,
        'max-video-preview': -1,
        'max-image-preview': 'large',
        'max-snippet': -1,
      },
    },
    verification: {
      google: 'google99f65fca623e2661',
    },
    openGraph: await mergeOpenGraph({
      title: optimizedTitle,
      description: optimizedDescription,
      images: ogImage
        ? [
            {
              url: ogImage,
              width: 1200,
              height: 630,
              alt: doc?.meta?.title || optimizedTitle,
              type: 'image/jpeg',
            },
          ]
        : undefined,
      url: Array.isArray(doc?.slug) ? doc?.slug.join('/') : doc?.slug || '/',
      siteName: defaultSiteName,
      locale: 'th_TH',
      type: pageType === 'post' ? 'article' : 'website',
      // Facebook Algorithm 2025 - Enhanced Open Graph
      ...(siteSettings?.companyName && {
        'business:contact_data:street_address': siteSettings.address,
        'business:contact_data:locality': 'р╕Хр╕ер╕┤р╣Ир╕Зр╕Кр╕▒р╕Щ',
        'business:contact_data:region': 'р╕Бр╕гр╕╕р╕Зр╣Ар╕Чр╕Юр╕бр╕лр╕▓р╕Щр╕Др╕г',
        'business:contact_data:postal_code': '10170',
        'business:contact_data:country_name': 'р╕Ыр╕гр╕░р╣Ар╕Чр╕ир╣Др╕Чр╕в',
        'business:contact_data:phone_number': siteSettings.phone,
        'business:contact_data:email': siteSettings.email,
      }),
    }),
    // Google Algorithm 2025 - Enhanced Twitter Cards
    twitter: {
      card: 'summary_large_image',
      title: optimizedTitle,
      description: optimizedDescription,
      images: ogImage ? [ogImage] : undefined,
      creator: '@jmccompany',
      site: '@jmccompany',
    },
    // Google Algorithm 2025 - App Links for mobile optimization
    appLinks: {
      web: {
        url: canonicalUrl,
        should_fallback: true,
      },
    },
    // Additional meta for Google Algorithm 2025
    other: {
      'google-site-verification': 'google99f65fca623e2661',
      'format-detection': 'telephone=yes',
      'mobile-web-app-capable': 'yes',
      'apple-mobile-web-app-capable': 'yes',
      'apple-mobile-web-app-status-bar-style': 'default',
      'theme-color': '#ffffff',
      'msapplication-navbutton-color': '#ffffff',
      'apple-mobile-web-app-title': defaultSiteName,
      'application-name': defaultSiteName,
      'geo.region': 'TH-10',
      'geo.placename': 'р╕Хр╕ер╕┤р╣Ир╕Зр╕Кр╕▒р╕Щ, р╕Бр╕гр╕╕р╕Зр╣Ар╕Чр╕Юр╕бр╕лр╕▓р╕Щр╕Др╕г',
      'geo.position': '13.780839074740534;100.4622982337261',
      ICBM: '13.780839074740534, 100.4622982337261',
      // Local Business Schema signals
      'business-type': 'construction materials store',
      'business-hours': siteSettings?.businessHours || 'Mo-Sat 07:00-17:00',
      'serves-location': 'р╕Хр╕ер╕┤р╣Ир╕Зр╕Кр╕▒р╕Щ, р╕Бр╕гр╕╕р╕Зр╣Ар╕Чр╕Юр╕бр╕лр╕▓р╕Щр╕Др╕г, р╕Ыр╕гр╕░р╣Ар╕Чр╕ир╣Др╕Чр╕в',
    },
  }
}
